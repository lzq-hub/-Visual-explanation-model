#!usr/bin/env python
# encoding:utf-8
from __future__ import division


"""
功能： 样本预测+Attention计算
"""


import os
import sys
import json
import time
import datetime
import numpy as np
from scipy.stats import *
import matplotlib.pyplot as plt
from sklearn.metrics import *
from keras.layers import *
from sklearn.preprocessing import *
from keras.models import *
from keras.layers.pooling import MaxPooling1D
from keras.layers.core import Activation, Dropout, Dense, Flatten
from keras.callbacks import EarlyStopping, ModelCheckpoint, Callback
from keras.layers.normalization import BatchNormalization
from keras.optimizers import SGD, Adadelta, Adagrad, RMSprop
from keras.layers.advanced_activations import PReLU
from keras.layers.convolutional import *
from sklearn.metrics import *
from keras.utils import plot_model




myName = "attention_vec"
myModel = load_model("result/model.h5")
label_list = ["0", "1", "2", "3"]




def dataSample(one_list, c=5):
    """
    下采样
    """
    return [one_list[i : i + c] for i in range(len(one_list)) if i % c == 0]



def toSample(data="test/0.csv"):
    """
    样本标准化
    """
    with open(data) as f:
        data_list = [one.strip() for one in f.readlines() if one.strip()]
    cut_list = dataSample(data_list)
    vec_list = []
    for one_list in cut_list:
        try:
            one = float(one_list[0])
        except:
            one = 0
        vec_list.append(one)
    print("vec_list_length: ", len(vec_list))
    return vec_list



def singlePredict(data="2000.csv", pic_path="2000.png", csv_path="2000.csv"):
    """
    对比预测
    """
    sample = toSample(data=data)
    X = []
    X.append(sample)
    X = np.array(X)
    try:
        y_pred = myModel.predict(X)
    except:
        X = X.reshape(-1, X.shape[0], X.shape[1])
        y_pred = myModel.predict(X)
    y_pred = y_pred.tolist()[0]
    print("y_pred: ", y_pred)
    label_index = None
    label_proba = 0
    for i in range(len(y_pred)):
        if y_pred[i] > label_proba:
            label_proba = y_pred[i]
            label_index = i
    print("label_index: ", label_index)
    print("label_proba: ", label_proba)
    pred_label = label_list[label_index]
    print("pred_label: ", pred_label)
    results = []
    inp = myModel.input
    attentions = [layer.output for layer in myModel.layers if layer.name == myName]
    my_self = [K.function([inp] + [K.learning_phase()], [MO]) for MO in attentions]
    my_att_layer_outputs = [my([X, 1.0])[0] for my in my_self]
    for laac in my_att_layer_outputs:
        results.append(laac)
    vectors = np.mean(results[0], axis=2).squeeze()
    print("vectors: ", vectors.tolist())
    # 可视化
    ticks_list = list(range(200))
    plt.clf()
    plt.figure(figsize=(50, 8))
    plt.bar(range(len(vectors)), vectors.tolist())
    plt.xticks(list(range(len(ticks_list))), ticks_list, rotation=45)
    plt.title("All Vector Attention")
    plt.savefig(pic_path)
    # 存储
    with open(csv_path, "w") as f:
        for one_value in vectors.tolist():
            f.write(str(one_value).strip() + "\n")
    print("Attention  Value Save To CSV Finished.....................")
    return pred_label, vectors



def batchPredict(testDir="test/"):
    """
    批预测
    """
    for one_csv in os.listdir(testDir):
        one_path = testDir + one_csv
        print(
            "====================================================================================="
        )
        print("Predict File: ", one_path)
        pic_path = "Attention_Value_" + one_csv.split(".")[0].strip() + ".jpg"
        csv_path = "Attention_Value_" + one_csv.split(".")[0].strip() + ".csv"
        one_pred_label, one_attention_value = singlePredict(
            data=one_path, pic_path=pic_path, csv_path=csv_path
        )
        print(
            "====================================================================================="
        )




if __name__ == "__main__":


    print(
        "=====================================Loading predict4Attention=========================================="
    )



    # # 数据加载
    # one_sample = toSample(data="test/0.csv")
    # print("one_sample: ", one_sample)
    #
    #
    # # 单样本预测
    # singlePredict(data="test/1.csv")


    # 整体预测
    batchPredict(testDir="test/")
